<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright [2010], Red Hat, Inc., and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="jcr-ocm">
    <title>Seam JCR - Object Content Mapping</title>
    <section id="jcr-ocm-about">
        <title>What is Object Content Mapping?</title>
        <para>Object Content Mapping is a design paradigm, in the same light as ORM (Object Relational Mapping) frameworks
        such as JPA or Hibernate, where statically typed objects are bound to a storage mechanism, in this case
        a JCR store.  Seam JCR OCM is provided as annotations only on top of entities that are discovered during
        the CDI Phase ProcessAnnotatedType.  In addition, Seam JCR's OCM implementation provides ServiceHandlers 
        for working with entities over JCR.
        </para>
    </section>
    <section id="jcr-ocm-mapping">
    	<title>Mapping and Conversion Capabilities</title>
    	<para>
    	The mapping API is very simple and designed to be clean.  In order to define an entity, you simply need to use the
    	annotation <literal>org.jboss.seam.jcr.annotations.ocm.JcrNode</literal> to define that this is an entity to map.  All fields
    	by default will be mapped to their field names.  You can override this behavior by using the annotation <literal>org.jboss.seam.jcr.annotations.ocm.JcrProperty</literal>
    	which will map the property to a different property name.  The <literal>JcrProperty</literal> annotation can be placed on both field and getter method.
    	You can define a special property <literal>uuid</literal> of type String that will represent the identifier for the node.  This is a sample node mapping:
    	</para>	
    	<programlisting role="JAVA">
    	@JcrNode("nt:unstructured")
public class BasicNode implements java.io.Serializable {
	@JcrProperty("myvalue")
	private String value;
	private String uuid;
	private String lordy;
	public String getValue() {
		return value;
	}
	public void setValue(String value) {
		this.value = value;
	}
	public String getUuid() {
		return uuid;
	}
	public void setUuid(String uuid) {
		this.uuid = uuid;
	}
	@JcrProperty("notaproperty")
	public String getLordy() {
		return lordy;
	}
	public void setLordy(String lordy) {
		this.lordy = lordy;
	}	
}
    	</programlisting>
    	<para>
    	The simplest way to convert entities is to use CDI Events.  There are two event objects that can be fired to support 
    	parsing, <literal>org.jboss.seam.jcr.ocm.ConvertToNode</literal> and <literal>org.jboss.seam.jcr.ocm.ConvertToObject</literal>.
    	By passing in a node and a pre-constructed object you can convert the full node to object or object to node depending on your
    	need.  Here is a sample parsing (from our test cases):
    	</para>
    	<programlisting role="JAVA">
    	@Inject Event&lt;ConvertToObject&lt; objectEvent;
    	@Inject Event&lt;ConvertToNode&lt; nodeEvent;
    	....
    	
    	Node root = session.getRootNode();
        Node ocmnode1 = root.addNode("ocmnode1","nt:unstructured");
        BasicNode bn = new BasicNode();
        bn.setValue("Hello, World!");
        bn.setLordy("this was saved.");
        nodeEvent.fire(new ConvertToNode(bn,ocmnode1));
        
        Node hello2 = root.getNode("ocmnode1");
        BasicNode bn2 = new BasicNode();
        objectEvent.fire(new ConvertToObject(hello2,bn2));
    	</programlisting>
    </section>
    <section id="ocm-dao">
    	<title>JCR Data Access Objects</title>
    	<para>
    	If you have ever worked with entities, the term DAO should be very familiar to you.  Seam JCR OCM
    	supports DAOs in a highly automated fashion.  Using annotations and interfaces only, you can automate
    	querying, finds and saving entities into their mapped node types.  There are four annotations to support
    	DAOs:
    	
    	<orderedlist>
    		<listitem>
    			<para>
    			<literal>org.jboss.seam.jcr.annotations.ocm.JcrDao</literal>
    			Defines this interface as a DAO interface.  The ServiceHandler will be used to process these methods.
    			This annotation should be placed at the interface level.
    			</para>
    		</listitem>
    		<listitem>
    			<para>
    			<literal>org.jboss.seam.jcr.annotations.ocm.JcrFind</literal>
    			Defines this method as a find method, loading by identifier.  The method should take a single String parameter
    			and return a mapped node type.
    			</para>
    		</listitem>
    		<listitem>
    			<para>
    			<literal>org.jboss.seam.jcr.annotations.ocm.JcrQuery</literal>
    			Defines this method as returning a <literal>java.util.List</literal> of mapped entities that can be mapped using the query results.
    			Has properties defining the type to return, query to use, and the query language.
    			</para>
    		</listitem>
    		<listitem>
    			<para>
    			<literal>org.jboss.seam.jcr.annotations.ocm.JcrParam</literal>
    			JcrParams are placed on the parameter arguments to a method annotated JcrQuery.  Each argument should be a Value object
    			and map based on bind parameters in the query.
    			</para>
    		</listitem>
    	</orderedlist>
    	Here is a sample definition of an interface, describing the objects that can be used:
    	</para>
    	<programlisting role="JAVA">
    	import static org.jboss.seam.jcr.ConfigParams.MODESHAPE_URL;

import java.util.List;

import org.jboss.seam.jcr.annotations.JcrConfiguration;
import org.jboss.seam.jcr.annotations.ocm.JcrDao;
import org.jboss.seam.jcr.annotations.ocm.JcrFind;
import org.jboss.seam.jcr.annotations.ocm.JcrQuery;
import org.jboss.seam.jcr.annotations.ocm.JcrSave;
import org.jboss.seam.jcr.test.ocm.BasicNode;

@JcrDao(
	@JcrConfiguration(name = MODESHAPE_URL, 
		value = "file:target/test-classes/modeshape.xml?repositoryName=CarRepo")
)
public interface BasicNodeDAO {
	@JcrFind
	public BasicNode findBasicNode(String uuid);
	@JcrQuery(query="select * from [nt:unstructured]",language="JCR-SQL2",resultClass=BasicNode.class)
	public List&lt;BasicNode&gt; findAllNodes();
	@JcrSave
	public String save(String path, BasicNode basicNode);
}
    	</programlisting>
    	<para>In this case, we are telling the JcrDao BasicNodeDAO to use the JCR Session based on the 
    	annotated JcrConfiguration noted.  Since BasicNode is mapped to nt:unstructured, we can map any nt:unstructured
    	to it by calling findAllNodes.  We can save a basic node to a given path as well as find based on uuid.
    	The best part is that there is no implementation necessary on your side.  You can use this interface as is.
    	</para>
    	<programlisting role="JAVA">
    	@Inject
	BasicNodeDAO basicDAO;
    
	....

    	BasicNode bn = new BasicNode();
    	bn.setValue("this is my node.");
    	String uuid = basicDAO.save("/anypathone",bn);
    	System.out.println("The UUID is: "+uuid);
    	
    	BasicNode bn2 = basicDAO.findBasicNode(uuid);
    	System.out.printf("The original node was %s and the new node is \n",bn.getValue(), bn2.getValue());
    	
    	List&lt;BasicNode&gt; nodes = basicDAO.findAllNodes();
    	System.out.println(nodes);
    	</programlisting>
    </section>
</chapter>
